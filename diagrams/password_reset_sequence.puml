@startuml PasswordResetSequence

skinparam backgroundColor white
skinparam sequenceArrowThickness 2
skinparam sequenceParticipantBorderThickness 2
skinparam sequenceBoxBorderColor #999999
skinparam sequenceParticipantBorderColor #333333
skinparam sequenceParticipantBackgroundColor #F0F8FF
skinparam sequenceActorBorderColor #333333
skinparam sequenceActorBackgroundColor #FEFECE
skinparam sequenceLifeLineBorderColor #999999

title Password Reset Sequence

actor "User" as user
participant "Frontend\nUI" as frontend
participant "PasswordReset\nController" as resetController
participant "UserService" as userService
participant "EmailService" as emailService
database "Database" as db
participant "Email\nServer" as emailServer

== Request Password Reset ==

user -> frontend : Click "Forgot Password"
activate frontend

frontend -> frontend : Display password reset form
frontend <-- user : Enter email address
frontend -> frontend : Validate email format

frontend -> resetController : POST /api/auth/forgot-password
activate resetController
note right: {email: "user@example.com"}

resetController -> userService : findByEmail(email)
activate userService
userService -> db : Query for user
activate db
db --> userService : User found
deactivate db

alt User Not Found
    userService --> resetController : User not found
    resetController --> frontend : 200 OK (for security reasons)
    frontend --> user : Display generic success message
else User Found
    userService -> userService : Generate reset token
    userService -> db : Save reset token with expiry
    activate db
    db --> userService : Token saved
    deactivate db
    userService --> resetController : Reset token created
    deactivate userService
    
    resetController -> emailService : sendPasswordResetEmail(user, token)
    activate emailService
    emailService -> emailServer : Send email with reset link
    activate emailServer
    emailServer --> emailService : Email sent
    deactivate emailServer
    emailService --> resetController : Email sent successfully
    deactivate emailService
    
    resetController --> frontend : 200 OK
    deactivate resetController
    frontend --> user : Display instructions to check email
end
deactivate frontend

== Password Reset Token Validation ==

user -> frontend : Click reset link in email
activate frontend
note left: Contains token in URL

frontend -> resetController : GET /api/auth/reset-password?token=xyz
activate resetController

resetController -> userService : validatePasswordResetToken(token)
activate userService
userService -> db : Find token
activate db
db --> userService : Token found
deactivate db

userService -> userService : Check if token is expired
userService -> userService : Check if token is used

alt Token Invalid or Expired
    userService --> resetController : Token invalid
    resetController --> frontend : 400 Bad Request
    frontend --> user : Display error message
else Token Valid
    userService --> resetController : Token valid
    deactivate userService
    
    resetController --> frontend : 200 OK
    deactivate resetController
    frontend --> user : Display password reset form
end
deactivate frontend

== Password Reset Confirmation ==

user -> frontend : Enter new password and confirm
activate frontend

frontend -> frontend : Validate password strength
frontend -> frontend : Validate passwords match

frontend -> resetController : POST /api/auth/reset-password
activate resetController
note right: {token: "xyz", newPassword: "pwd", confirmPassword: "pwd"}

resetController -> userService : resetPassword(token, newPassword)
activate userService
userService -> db : Find token
activate db
db --> userService : Token found
deactivate db

userService -> userService : Validate token again
userService -> userService : Hash new password

alt Reset Failed
    userService --> resetController : Reset failed
    resetController --> frontend : 400 Bad Request
    frontend --> user : Display error message
else Reset Successful
    userService -> db : Update user password
    activate db
    db --> userService : Password updated
    deactivate db
    
    userService -> db : Mark token as used
    activate db
    db --> userService : Token updated
    deactivate db
    
    userService --> resetController : Password reset successful
    deactivate userService
    
    resetController -> emailService : sendPasswordChangedEmail(user)
    activate emailService
    emailService -> emailServer : Send password changed notification
    activate emailServer
    emailServer --> emailService : Email sent
    deactivate emailServer
    emailService --> resetController : Email sent successfully
    deactivate emailService
    
    resetController --> frontend : 200 OK
    deactivate resetController
    frontend --> user : Display success message & redirect to login
end
deactivate frontend

== Login with New Password ==

user -> frontend : Navigate to login page
activate frontend
frontend <-- user : Enter credentials with new password
frontend -> frontend : Client-side validation
frontend -> resetController : POST /api/auth/login
deactivate frontend
note right: Standard login flow continues...

@enduml 